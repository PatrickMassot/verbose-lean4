import Verbose.Tactics.Statements
import Verbose.French.Widget

open Lean Meta Elab Command Parser Tactic

open Lean.Parser.Term (bracketedBinder)

implement_endpoint (lang := fr) mkWidgetProof (prf : TSyntax ``tacticSeq) : CoreM (TSyntax `tactic) :=
Lean.TSyntax.mkInfoCanonical <$> `(tactic| with_suggestions $prf)

implement_endpoint (lang := fr) victoryMessage : CoreM String := return "Gagn√© üéâ"
implement_endpoint (lang := fr) noVictoryMessage : CoreM String := return "L‚Äôexercice n‚Äôest pas termin√©."

/- **TODO**  Allow omitting Donn√©es or Hypoth√®ses. -/

elab ("Exercice"<|>"Exemple") str
    "Donn√©es :" objs:bracketedBinder*
    "Hypoth√®ses :" hyps:bracketedBinder*
    "Conclusion :" concl:term
    tkp:"D√©monstration :" prf?:(tacticSeq)? tkq:("QED" <|> "CQFD") : command => do
  mkExercise none objs hyps concl prf? tkp tkq

elab ("Exercice-lemme"<|>"Lemme") name:ident str
    "Donn√©es :" objs:bracketedBinder*
    "Hypoth√®ses :" hyps:bracketedBinder*
    "Conclusion :" concl:term
    tkp:"D√©monstration :" prf?:(tacticSeq)? tkq:("QED" <|> "CQFD") : command => do
  mkExercise (some name) objs hyps concl prf? tkp tkq
